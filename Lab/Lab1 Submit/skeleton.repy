# Fredrik Ek, 901109-0959
# Robert Stigsson, 910814-4719

def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  msgheader = sockobj.recv(1024) # Receive message, 
  
  # We split up the html page in two, so that we later on easily will be  
  # able to input the submitted data on a specific position on the screen. 
  htmlhead = """<!DOCTYPE html>
              <html>
              <head>
              <meta content="text/html; charset=utf-8" http-equiv="content-type">
              <title>Blackboard GroupName</title>
              </head>
              <body>
                <h2> Board Content</h2>"""
  htmlfoot = """
                <br>
                <h3>Submit to board<h3>
                <textarea rows="4" cols="50" name="comment" form="usrform"></textarea>
                <form action="" id="usrform" method="post">
                <input type="submit">
                </form>
              </body>
              </html>"""
  htmlresponse = htmlhead
  TCP_PORT = 63119
  
  # Here we handle the different "types" of requests which can occur in the application
  # The first type is a basic GET-request which applies when someone loads the page
  if msgheader.startswith( 'GET' ):
    comments = mycontext.get("comment")
    if(comments):
      for comment in comments:
        htmlresponse += comment + "<br>"
    htmlresponse += htmlfoot
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
    stopcomm(thiscommhandle)   
  
  # The second type of requests that can occur is the POST-request which happens when someone
  # submits text through the textbox.
  
  elif msgheader.startswith( 'POST' ):
    httpheader = msgheader.split("comment=")
    posted_comment = httpheader[1]
    comments = mycontext.get("comment")
    
    if(comments):
      comments.append(str(posted_comment))
    else:
      comments = [posted_comment]
    mycontext["comment"] = comments
    
    # ipconfig.txt contains the different ip adresses for all our vessels, generated
    # by "!> show ip to ipconfig.txt" in the seash bash
    ipconfig_file = open("ipconfig.txt", 'r')
    for ipconfig in ipconfig_file:
      host = ipconfig.split()
      host = host[0]
      # A check so that the current vessel do not send the submitted comment to itself
      # Opens a TCP-connection for the rest
      if(host != getmyip()):
        tempsocket = openconn(host, TCP_PORT)
        tempsocket.send("SERVERPOST comment=" + posted_comment)
    ipconfig_file.close()
    
    # Prints the comments on their own lines between "htmlhead" and "htmlfoot"
    for comment in comments:
        htmlresponse += comment + "<br>"
    htmlresponse += htmlfoot
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
    stopcomm(thiscommhandle)
    
  # The third type of "request" or case is one that we made up specifically for this assignment
  # We call it SERVERPOST and its only job is to forward submits to the different vessels using
  # a TCP-connection
  
  elif msgheader.startswith( 'SERVERPOST' ):
    httpheader = msgheader.split("comment=")
    posted_comment = httpheader[1]
    comments = mycontext.get("comment")
    if(comments):
      comments.append(str(posted_comment))
    else:
      comments = [posted_comment]
    mycontext["comment"] = comments
    stopcomm(thiscommhandle)
  
  # This case should not occur
  
  else:
    print "Will never end up here"
    
	
if callfunc == 'initialize':
  if len(callargs) > 1:
    raise Exception("Too many call arguments")

  # Running remotely (assuming that we pass input argument only remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  elif len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()

  # Running locally:
  # whenever we get a connection on 127.0.0.1:12345 we'll call board
  else:
    port = 12345
    ip = '127.0.0.1'
  listencommhandle = waitforconn(ip,port,board)
