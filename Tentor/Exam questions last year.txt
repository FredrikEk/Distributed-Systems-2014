Distributed Exam: 2013-12-17

1a) Define the term "Distributed System" in your own words. Be brief and precise. (1p)

Answer: A distributed system is the opposite of the typical centralized system concisting of a server to which clients can connect, where users of the systems all use their own client. A distributed system is a network concisting of several computers (nodes), together forming the system and cooperating on a common task.

b) When designing or developing a distributed system, its distributed nature presents a number of challenges, which we discussed in the course. List at least six such challenges. (2p)

Answer: 
• Networks are unreliable	
• Latency is not zero	
• Bandwidth is finite	
• A network is not secure	
• Topology does change
• There are several administrators	
• Transports cost	
• The network is inhomogeneous

c) Select three challenges you listed in 1b) and detail on them. For each, focus on the following two questions: Why do these make developing Distributed Systems challenging? What mechanisms did we study in the course to deal with them? (3p)
Answer:
TODO

d) The following statement is attributed to Thomas J. Watson, Chairman and CEO of international Business Machines (IBM), in 1943: "I think there is a world market for maybe five computers". Please state the key consequences for distributed systems if this sentence had been the correct vision. (2p)
Answer: 
TODO

e) Centralized Systems (e.g. Client Server Systems) vs Decentralized Systems (e.g. Peer-To-Peer Systems): We discussed the differences between the centralized architectures and the decentralized architectures. Describe each system briefly and discuss two advantages of each. (2p)
Answer:

Advantages Peer-to-peer
	• Don't need large data centers, because the users of the system contributes    with the computational power
	• No single authority
Advantages Client-Server:
	• Good control, can decide what to publish
	• Easy to implement

2a) Define the terms "Mutual Exclusion" and "Election" in your own words. Be brief and precise. (2p)
Answer:
Mutual Exclusion: Two processes cant be in the critical sector at the same time.
Election: All nodes decide upon a leader/master node.

b) Token Ring for Mutual Exclusion. (3p)
Answer:
	i. Please describe how the Token Ring algorithm works.
	It makes use of a directed logical ring where a token is passed from one node to the next node in the circle. If a node wishes to access the critical section, it can only do so when it has the token. When a node is done or if it doesn’t need to enter the critical section, it sends the token on to the next node. (Its neighbour)

	ii. List at least two limitations of its design.
		• Not scalable
		• Not efficient if no one wants to enter critical section at any time
		• The token could be lost


c) Any algorithm for mutual exclusion must fulfill two goals: safety and liveness. (2p)
Answer: 
	i. Please define these two goals, be brief and precise.
		• Liveness - "Something good will eventually happen", some node will eventually enter the critical sector.
		• Safety - "something bad will never happen", Avoid processes crashing because of mutual exclusion.

	ii. Explain how the token Ring Algorithm achieves these.
		• Safety: There is only one token and the nodes form a directed ring. A node can only enter the critical section when it has the token. 
		• Liveness: Because of the ring structure, the token will eventually reach a node who wants to enter the critical section.

d) We discussed the Ring Algorithm for Election. (3p)
Answer:
	i. Please describe how the Ring Algorithm works. For simplicity, assume that there is only one initiator for the election. Please also note what assumption the algorithm makes on the topology.

	The topology is a directed logical ring. It works by having the initiator send a message around the ring where each node compares the message with its own to see if the message for instance has the highest number (in a random roll). The node with the highest number wins and its address is forwarded.	

	ii. What is its message complexity? Assume that there are n nodes and one initiator.
	O(n)

3a) Define the terms "naming" and "name resolution" in Distributed Systems in your own words. Be brief and precise. (2p)
Answer: 
	i. Naming - An identifier/address for a node or a resource. - "A name in a distributed system is a string of bits or characters that is refer to an entity"
    ii. Name resolution - The process of looking up a name. Uses a key-value to get the numerical value from the name (key).

b) In the course we discussed two concepts for name resolution: Iterative and recursive name resolution. Briefly describe each concept and highlight their key differences. (3p)
Answer:
	• Iterative name resolution - Get address for next known, and do the work yourself.
	• Recursive name resolution - The server gets the address for you and contacts the other servers.

c) In the lecture we discussed the concept Chord. Chord is a a Distributed Hash Table (DHT). Answer the following questions about Chord: (2p)
Answer:
	i. What topology do the nodes form?
	A logical directed ring.

	ii. What operations does a DHT, e.g., Chord, provide?
	put(), get()

	iii. How is redundancy in Chord achieved?
	By keeping a copy of neighbours
	
	iv. In Chord, how many hops does it take on average to lookup a data item? (Assume that the number of nodes in the Chord is "n").
	(log n)/2

d) Finger tables in Chord: Below you find a picture of a Chord ring (on the left) and the finger table of node 80 (on the right). Please complete its finger table, i.e., list to which nodes the figures point and explain your calculations.
Note: In this example the namespace size is 0 to 127, i.e., finger table size is 7. (3p)
Answer:
It is calculated by 80 + n^i mod 7. i goes from 0 to 6 as shown in the table to the right.

4a) In the course we discussed the concept of clock synchronization for physical clocks. Why is clock synchronization important in Distributed Systems that rely on physical clocks? (1p)
Answer:
	Because physical clocks drift apart and dont have the same tick rate.


b) One algorithm for clock synchronization is called Berkely Algorithm. 
Answer:
	i. It operates in thee steps. Please describe these.
		1. The Master/Leader node polls the other nodes about their time.
		2. The Master/Leader then observes the RTT of messages and calculates the average time, t.
		3. Instead of sending the updated current time back to the other process, the master then sends out the amount (positive or negative) that each slave node must adjust its clock. 

	ii. How do the goals of this algorithm differ from other algorithms for clock synchronization such as Christian's Algorithm or the SNTP Algorithm?
		The Berkley Algorithm says there is no correct time and therefore uses an average time in the group it is in. Christian's Algorithm tries to mask network latency when using time synchronization and SNTP tries to set a correct UTP time.


c) In the course, we discussed the concept of Vector Clocks. Please answer the following questions about Vector Clocks.(3p)
Answer:
	i. How many clocks does each node maintain?
		One. One per node.

	ii. Upon receiving a message, what does a node do with its vector clock(s)?
		It increases its own clock with 1 and updates the other if they are higher.

	iii. Below you find a figure of a vector clock for three nodes. All vector clocks are initialized to zero. Please list the vector clocks for each event.
		TODO

d) In the course we discussed how Vector Clocks help to distinguish causally related events and concurrent events.(4p)
Answer:
	i. Please explain how this can be achieved
		At each stage you can sort what certain processes know about other processes. What they know is causally related.
		Not: Causality is the relation between an event (the cause) and a second event (the effect), where the second event is understood as a physical consequence of the first. Conccurrency: Happens at same time.

	ii. Below you see pairs of Vector clocks. Note for each pair whether they denote concurrent or causally related events. Briefly explain your reasoning.
		Are these two events causally related or concurrent?
		Event on Node1 | Event on Node 2
		VC[1] = 1 		 VC[1] = 1
		VC[2] = 0		 VC[2] = 6
			Causally related
		
		Are these two events causally related or concurrent?
		Event on Node1 | Event on Node 2
		VC[1] = 1 		 VC[1] = 0
		VC[2] = 0 		 VC[2] = 6
			Concurrently related
	

5 and 6 are missing from Exam: 2013-12-17 but 1-4 are the same for 2013-12-17 and 2014-04-25, except 4b.
Here follows 4b, 5 and 6 from 2014-04-25:

4 b) Please answer the following questions about logical clocks. (2p)
Answer:
	i. How do logical clocks differ from physical clocks?
		Logical clocks keep track of event ordering among related (causal) events
		Physical clocks keep time of day – Consistent across systems

	ii. Note two types of logical clocks.
		TODO
	iii. When do logical clocks "tick", i.e., when are they incremented?
		TODO
	iv. When a node sends a message to another node, what does it do with its logical clock?
		TODO

5a) Define the term replication. Be precise and brief. (1p)
Answer:
Replication is copying of data/programs onto different nodes, hdd etc.


b) List at least three benefits that replication provides. Explain these benefits briefly. (1p)
Answer:
	• Performance - Copies closer to user.
	• Availability - If one node crashes others can take its place.
	• Security - Can work even with malicious copies.

c) We discussed the concepts of Total Ordering, Sequential Ordering, and Causal Ordering.(4p)
Answer:	
	i. Briefly explain each concept
		• Total ordering - All processes excute instructions in the same order.
		• Sequential Ordering - All processes excute instructions from one process in the same order.
		• Causal Ordering - Instructions casually related executes in the same order.

	ii. Below you see two figures. For each figure, please note wether it describes Total Ordering, Sequential Ordering, and/or Causal Ordering. Briefly describe your decisions.
		First: Sequential and Causal Second: sequential 

d) We discussed the concept of monotonic writes. (4p)
Answer:
	i. Briefly explain the concept.
		Montonic writes - A write operation by a process on a data item x is completed before any successive write operation on x by the same process (i.e.a wrote operation on a copy of data item is performed only if that copy has been brought up to date by mean of any preceding write operation, even if taken place on another copy of x).

	ii. Below you see three figures. For each figure, please note wether it describes monotonic writes. Briefly describe your decisions.
		Figure1: Monotonic writes	 Figure2: No	 Figure 3: No (WS(x2;x1)  in wrong order)

6a) Define the term "fault tolerance". Be brief and precise. (2p)
Answer:

You could say that fault tolerance is the property that enables a system to continue operating properly in the event of the failure of (or one or more faults within) some of its components.

b) We discussed the "Byzantine Generals Problem". (4p)
Answer:
	i. In the "Byzantine Generals Problem" there are honest generals and dishonest generals (traitors). What is the goal of the honest generals? What is the goal of the traitors?
		The goal of the honest generals is that all of them should make the same decisions. Whereas the goal of the traitors is to avoid that from happening (The exact opposite).

	ii. In the lecture we introduced an algorithm with multiple phases to enable consensus among the generals. Explain the algorithm and its different phases.
		1. Ask all others what they want to do
		2. Tell everyone else what the others said to you
 		3. Mask out diffrent answers as faulty
		4. Do the majority


	iii. Under what conditions can the generals achieve consensus. How many honest generals are required, assuming that there are k dishonest ones?
		2k+1 honest generals. A Majority.

c) We discussed the "Two Phase Commit" Protocol. As the name states, it consists of two phases. (4p)
Answer:
	i. Please name and describe phase 1 briefly.
		Phase1 - voting. Are other processes ready for the transactions, saves volatile.

	ii. Please name and describe what happens during a failure in phase 1, e.g., a node not replying or a message getting lost.
		If a node doesn’t respond the commiter, it sends an abort message to all nodes.

	iii. Please name and describe phase 2 briefly.
		Phase 2 - Decison phase. Ff all nodes answer that they are ready, The coordinator sends a GLOBAL_COMMIT, otherwise GLOBAL_ABORT. Nodes commit the update.

	iv. Please describe what happens during a failure in phase 2, e.g., a node not replying or a message getting lost.
		The nodes save an uncommited instruction that they could commit upon recovery.

Here follows answers to the Exam: 2014-08-20. Question 1,2 and 5 are exactly the same as previous two. Among the others some questions differ a bit, which will be brought up here:

3c) In the course we discussed the concept of clock synchronization for physical clocks. (3p)
Answer:
	i. Why is clock synchronization important in Distributed Systems that rely on physical clocks?
		TODO
	ii. One algorithm for clock synchronization is called Cristians Algorithm. It operates in two steps. Please describe these. Please also note the assumptions this algorithm makes and note the equation the client uses to set its new time.
		TODO

4c) In the lectures we discussed the concepts of "Consistency" and "Eventually Consistency". (1p)
Answer:
	i. Please define the term Consistency and explain it briefly.
		TODO
	ii. Please define the term "Eventual Consistency" and explain it briefly.
		TODO

6a) Explain the basic concept of BitTorrent. Explain the terms "Seed(er)", "Leech(er)", "Tracker" and "Swarm" (3p)
Answer:
TODO

b) Modern BitTorrent can work without trackers. This mode is called "Trackerless" BitTorrent. Explain this mode of operation and list its benefits. (3p)
Answer:
TODO

c) Explain the concept of Tit-for-Tat that BitTorrent uses to aoid "free-riding", i.e, how it ensures that nodes that download also upload? What roles play "choking", "un-choking", and "optimistic un-choking" in this context?
Answer:
TODO